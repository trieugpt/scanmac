#!/usr/bin/env python3
# scanmac.py ‚Äî OCR MAC t·ª´ ·∫£nh (Termux, song song + cache + wake-lock + UI ƒë·∫πp)
# - 1 thanh ti·∫øn tr√¨nh m√†u xanh (1 d√≤ng): [%] (x/y)
# - Ctrl+C: th√¥ng b√°o r√µ r√†ng, l∆∞u cache & MAC ƒë√£ qu√©t, th·∫£ wake-lock r·ªìi tho√°t
# - Cache ·∫£nh ƒë√£ qu√©t (mtime+size) ƒë·ªÉ kh√¥ng OCR l·∫°i
# - CƒÉn l·ªÅ ƒë·∫πp, th·∫≥ng d·∫•u ":", c√≥ icon tr·∫°ng th√°i

import argparse, time, re, sys, shutil, os, json, subprocess
from pathlib import Path
from concurrent.futures import ProcessPoolExecutor, as_completed

# -------- ƒê·ªãnh d·∫°ng & Regex --------
IMG_EXT   = {".png", ".jpg", ".jpeg", ".webp"}
RE_COLON  = re.compile(r"\b(?:[0-9A-Fa-f]{2}[:\-]){5}[0-9A-Fa-f]{2}\b")
RE_DOT    = re.compile(r"\b[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\b")
RE_RAW12  = re.compile(r"\b[0-9A-Fa-f]{12}\b")
VALID     = re.compile(r"(?:[0-9A-F]{2}:){5}[0-9A-F]{2}$")

# -------- M√†u --------
GREEN = "\033[92m"
RESET = "\033[0m"

# -------- Wake-lock (gi·ªØ m√°y th·ª©c) --------
def have(cmd: str) -> bool:
    return shutil.which(cmd) is not None

def acquire_wakelock():
    # Ch·ªâ th·ª≠ n·∫øu c√≥ termux-wake-lock
    if have("termux-wake-lock"):
        try: subprocess.run(["termux-wake-lock"], check=False)
        except Exception: pass

def release_wakelock():
    if have("termux-wake-unlock"):
        try: subprocess.run(["termux-wake-unlock"], check=False)
        except Exception: pass

# -------- OCR helpers (top-level ƒë·ªÉ pickle) --------
def fix_ocr_typos(s: str) -> str:
    return s.translate(str.maketrans({
        "O":"0","o":"0","I":"1","l":"1","ƒ±":"1","S":"5","s":"5","B":"8",
        "‚Äî":"-","‚Äì":"-","‚àí":"-","Ôºö":":"
    }))

def normalize_mac(s: str) -> str:
    s = s.strip().upper().replace("-", ":")
    if "." in s: s = s.replace(".", "")
    if ":" not in s and len(s) == 12:
        s = ":".join(s[i:i+2] for i in range(0, 12, 2))
    return s

def extract_macs(text: str):
    text = fix_ocr_typos(text)
    found = set()
    for m in RE_COLON.findall(text): found.add(normalize_mac(m))
    for m in RE_DOT.findall(text):   found.add(normalize_mac(m))
    for m in RE_RAW12.findall(text): found.add(normalize_mac(m))
    return {m for m in found if VALID.fullmatch(m)}

def preprocess_image(img):
    from PIL import ImageOps
    img = ImageOps.grayscale(img)
    try: img = ImageOps.autocontrast(img)
    except Exception: pass
    w, h = img.size
    if max(w, h) < 900:
        scale = 900 / max(w, h)
        img = img.resize((int(w*scale), int(h*scale)))
    return img

def ocr_one_image(path: str, lang: str) -> set[str]:
    import pytesseract
    from PIL import Image
    p = Path(path)
    try:
        img = Image.open(p)
    except Exception:
        return set()
    img = preprocess_image(img)
    cfg1 = "--oem 3 --psm 6 -c tessedit_char_whitelist=0123456789ABCDEFabcdef:.-"
    txt1 = pytesseract.image_to_string(img, lang=lang, config=cfg1) or ""
    macs = extract_macs(txt1)
    if macs:
        return macs
    cfg2 = "--oem 3 --psm 7 -c tessedit_char_whitelist=0123456789ABCDEFabcdef:.-"
    txt2 = pytesseract.image_to_string(img, lang=lang, config=cfg2) or ""
    return extract_macs(txt2)

# -------- I/O --------
def list_images(folder: Path):
    return [str(p) for p in sorted(folder.iterdir()) if p.suffix.lower() in IMG_EXT]

def load_existing(out_path: Path):
    if not out_path.exists(): return set()
    out=set()
    for line in out_path.read_text(encoding="utf-8", errors="ignore").splitlines():
        line=line.strip().upper()
        if VALID.fullmatch(line): out.add(line)
    return out

def save_new(macs, out_path: Path):
    if not macs: return 0
    existed = load_existing(out_path)
    new = [m for m in sorted(macs) if m not in existed]
    if new:
        with out_path.open("a", encoding="utf-8") as f:
            for m in new: f.write(m + "\n")
    return len(new)

# -------- Cache ·∫£nh ƒë√£ qu√©t --------
def cache_path_for(dir_path: Path, override: str|None) -> Path:
    return Path(override) if override else (dir_path / ".scanmac_cache.json")

def load_cache(path: Path) -> dict:
    if not path.exists(): return {"images": {}}
    try:
        return json.loads(path.read_text(encoding="utf-8"))
    except Exception:
        return {"images": {}}

def save_cache(path: Path, data: dict):
    try:
        path.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception:
        pass

def file_sig(p: Path) -> tuple[int, int]:
    try:
        st = p.stat()
        return (int(st.st_mtime), int(st.st_size))
    except Exception:
        return (0, 0)

def filter_unscanned(imgs: list[str], cache: dict) -> tuple[list[str], int]:
    unscanned = []
    skipped = 0
    for s in imgs:
        p = Path(s)
        sig = file_sig(p)
        rec = cache["images"].get(s)
        if rec and tuple(rec) == sig:
            skipped += 1
        else:
            unscanned.append(s)
    return unscanned, skipped

# -------- UI --------
def term_width(default=50):
    try:
        return max(20, shutil.get_terminal_size().columns - 20)
    except Exception:
        return default

def progress_bar(done, total, width):
    pct = done/total if total else 1.0
    filled = int(pct * width)
    bar = "‚ñà"*filled + " "*(width - filled)
    sys.stdout.write(f"\r{GREEN}[{bar}] {pct*100:5.2f}% ({done}/{total}){RESET}")
    sys.stdout.flush()

def require_deps():
    try:
        import pytesseract  # noqa
        from PIL import Image  # noqa
    except Exception:
        sys.exit("‚ùå Thi·∫øu th∆∞ vi·ªán. C√†i:\n   pkg install tesseract\n   pip install pillow pytesseract")

# -------- Main --------
def main():
    require_deps()
    ap = argparse.ArgumentParser(description="OCR MAC t·ª´ ·∫£nh ‚Äî song song + cache + wake-lock, Ctrl+C ƒë·ªÉ d·ª´ng an to√†n.")
    ap.add_argument("--dir", required=True, help="Th∆∞ m·ª•c ·∫£nh (vd: /sdcard/OCR)")
    ap.add_argument("--out", default="scanmac", help="File k·∫øt qu·∫£")
    ap.add_argument("--lang", default="eng", help="Ng√¥n ng·ªØ OCR (eng/vie/...)")
    ap.add_argument("--workers", type=int, default=os.cpu_count() or 2, help="S·ªë ti·∫øn tr√¨nh song song (m·∫∑c ƒë·ªãnh = s·ªë l√µi CPU)")
    ap.add_argument("--cache", help="ƒê∆∞·ªùng d·∫´n file cache (m·∫∑c ƒë·ªãnh: DIR/.scanmac_cache.json)")
    ap.add_argument("--reset-cache", action="store_true", help="B·ªè cache c≈©, qu√©t l·∫°i to√†n b·ªô")
    args = ap.parse_args()

    folder = Path(args.dir)
    if not folder.is_dir(): sys.exit("‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c ·∫£nh.")
    all_imgs = list_images(folder)
    total_imgs = len(all_imgs)
    if total_imgs == 0: sys.exit("‚ùå Kh√¥ng c√≥ ·∫£nh h·ª£p l·ªá trong th∆∞ m·ª•c.")

    cpath = cache_path_for(folder, args.cache)
    cache = {"images": {}} if args.reset_cache else load_cache(cpath)

    # Wake lock ƒë·ªÉ m√°y kh√¥ng sleep khi ƒëang ch·∫°y
    acquire_wakelock()

    # L·ªçc ·∫£nh ƒë√£ qu√©t (kh√¥ng ƒë·ªïi mtime/size)
    to_scan, skipped = filter_unscanned(all_imgs, cache)
    total = len(to_scan)
    if total == 0:
        # Kh√¥ng in progress, ch·ªâ in t√≥m t·∫Øt ƒë·∫πp
        labels = [
            "üìÇ Th∆∞ m·ª•c", "üñºÔ∏è  T·ªïng ·∫£nh", "üö´ B·ªè qua (cache)",
            "‚ñ∂Ô∏è  Qu√©t l·∫ßn n√†y", "üîé MAC tr√≠ch xu·∫•t", "‚ûï M·ªõi l∆∞u", "üíæ File k·∫øt qu·∫£"
        ]
        values = [str(folder), str(total_imgs), str(skipped), "0", "0", "0", args.out]
        w = max(len(l) for l in labels)
        print("‚úÖ Kh√¥ng c√≥ ·∫£nh m·ªõi ƒë·ªÉ qu√©t.")
        for l, v in zip(labels, values):
            print(f"{l:<{w}} : {v}")
        release_wakelock()
        return

    width   = term_width()
    start   = time.time()
    all_mac = set()
    done    = 0
    interrupted = False

    try:
        with ProcessPoolExecutor(max_workers=max(1, args.workers)) as ex:
            future_map = {ex.submit(ocr_one_image, p, args.lang): p for p in to_scan}
            for fut in as_completed(future_map):
                p = Path(future_map[fut])
                try:
                    all_mac |= (fut.result() or set())
                except Exception:
                    pass
                cache["images"][str(p)] = list(file_sig(p))  # c·∫≠p nh·∫≠t cache ngay khi xong ·∫£nh
                done += 1
                progress_bar(done, total, width)
    except KeyboardInterrupt:
        interrupted = True
        # R∆°i xu·ªëng finally ƒë·ªÉ l∆∞u & th√¥ng b√°o
    finally:
        print()  # xu·ªëng d√≤ng sau progress
        save_cache(cpath, cache)         # l∆∞u cache d√π b·ªã ng·∫Øt
        added  = save_new(all_mac, Path(args.out))
        spent  = round(time.time() - start, 2)
        release_wakelock()               # th·∫£ wake-lock

        # T√≥m t·∫Øt ƒë·∫πp, cƒÉn th·∫≥ng d·∫•u :
        labels = [
            "üìÇ Th∆∞ m·ª•c", "üñºÔ∏è  T·ªïng ·∫£nh", "üö´ B·ªè qua (cache)",
            "‚ñ∂Ô∏è  Qu√©t l·∫ßn n√†y", "‚úîÔ∏è  ƒê√£ x·ª≠ l√Ω", "üîé MAC tr√≠ch xu·∫•t",
            "‚ûï M·ªõi l∆∞u", "‚è±Ô∏è  Th·ªùi gian", "üíæ File k·∫øt qu·∫£"
        ]
        values = [
            str(folder), str(total_imgs), str(skipped),
            str(total), str(done), str(len(all_mac)),
            str(added), f"{spent}s", args.out
        ]
        w = max(len(l) for l in labels)

        if interrupted:
            print("‚õî ƒê√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng (Ctrl+C). K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u an to√†n.")
        else:
            print("‚úÖ Ho√†n t·∫•t")

        for l, v in zip(labels, values):
            print(f"{l:<{w}} : {v}")

if __name__ == "__main__":
    main()
